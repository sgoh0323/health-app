{"version":3,"file":"static/js/400.958b6aa5.chunk.js","mappings":"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","sources":["components/api/ErrorContent.tsx","api/request.ts","helper/customModal.ts","api/testApi.ts","pages/ChatBot/content.tsx","pages/ChatBot/index.tsx","types/Common/AlertMassege.ts"],"sourcesContent":["import { AxiosError } from 'axios';\nimport React, { FC } from 'react';\n\nconst ErrorContent: FC<AxiosError> = (error: AxiosError) => {\n    const { response } = error;\n    return (\n        <>\n            <h3>{response.statusText} </h3> <p>{response.data.message}</p>\n        </>\n    );\n};\n\nexport default ErrorContent;\n","/* eslint-disable no-underscore-dangle */\n/* eslint-disable consistent-return */\nimport axios from 'axios';\nimport modal from 'helper/customModal';\nimport { Cookies } from 'react-cookie';\nimport ErrorContent from 'components/api/ErrorContent';\n\nlet isRefreshing = false;\nlet failedQueue = [];\n\nconst processQueue = (error, token = null) => {\n    failedQueue.forEach(prom => {\n        if (error) {\n            prom.reject(error);\n        } else {\n            prom.resolve(token);\n        }\n    });\n    failedQueue = [];\n};\nconst service = axios.create({\n    withCredentials: true,\n    // timeout: 1000 * 60 * 30 // TimeOut 30분으로 설정\n    // baseURL: 'http://cms-api-gateway-test.aimmed.io'\n});\n\nservice.interceptors.request.use(\n    config => {\n        // 헤더 토큰을 발급받은 토큰으로 설정\n        const cookies = new Cookies();\n        config.headers.Authorization = `Bearer ${cookies.get('accessToken')}`;\n        return config;\n    },\n    error => {\n        return Promise.reject(error);\n    }\n);\n/**\n * Response interceptor\n */\nservice.interceptors.response.use(\n    response => {\n        if (response?.data?.message && response?.data?.message.indexOf('성공') > -1) {\n            return response;\n        }\n        if (response?.data?.message && response?.data?.message.indexOf('완료') > -1) {\n            return response;\n        }\n        if (response?.data?.message) {\n            modal.warn(response?.data?.message);\n        }\n        return response;\n    },\n    async error => {\n        const cookies = new Cookies();\n        const originalRequest = error.config;\n        if (\n            error &&\n            error.response &&\n            error.response.status &&\n            error.response.status === 401 &&\n            !originalRequest._retry\n        ) {\n            if (isRefreshing) {\n                return new Promise(function refFunc(resolve, reject) {\n                    failedQueue.push({ resolve, reject });\n                })\n                    .then(token => {\n                        // originalRequest.headers.Authorization = `Bearer ${localStorage.getItem('accessToken')}`;\n                        originalRequest.headers.Authorization = `Bearer ${cookies.get('accessToken')}`;\n                        return axios(originalRequest);\n                    })\n                    .catch(err => {\n                        return Promise.reject(err);\n                    });\n            }\n            originalRequest._retry = true;\n            isRefreshing = true;\n            // const refreshToken = localStorage.getItem('refreshToken');\n            const refreshToken = cookies.get('refreshToken');\n            return axios\n                .post(\n                    `/admin-user-api/cms/token/refresh`,\n                    { refreshToken },\n                    {\n                        headers: { Authorization: `Bearer ${refreshToken}` }\n                    }\n                )\n                .then(response => {\n                    if (response?.data?.message && response?.data?.message.indexOf('성공') > -1) {\n                        // 리턴값\n                        const returnData = response.data.result;\n                        // 토큰 쿠키 저장\n                        const { accessToken: newAccessToken, refreshToken: newRefreshToken } = returnData.token;\n                        cookies.remove('accessToken');\n                        cookies.remove('refreshToken');\n                        cookies.set('accessToken', newAccessToken);\n                        cookies.set('refreshToken', newRefreshToken);\n\n                        cookies.set('accessToken', newAccessToken, {\n                            path: '/'\n                        });\n                        cookies.set('refreshToken', newRefreshToken, {\n                            path: '/'\n                        });\n                        // 헤더 토큰을 새로 발급받은 토큰으로 재설정\n                        service.defaults.headers.common.Authorization = `Bearer ${cookies.get('accessToken')}`;\n                        processQueue(null, returnData.AccessToken);\n                        // 반환\n                        return service(originalRequest);\n                    }\n                    processQueue(error, null);\n                    window.location.href = '#/login';\n                })\n                .catch(error => {\n                    processQueue(error, null);\n                    window.location.href = '#/login';\n                })\n                .finally(() => {\n                    isRefreshing = false;\n                });\n        }\n        modal.warn(ErrorContent(error));\n        console.error(error.response);\n    }\n);\nexport default service;\n","/* eslint-disable @typescript-eslint/explicit-module-boundary-types */\nimport { Modal } from 'antd';\nimport { alertMsg } from 'types/Common/AlertMassege';\n\nconst modal = {\n    msg: (msgNo: string, msg?: string, okCallback?: () => void, cancelCallback?: () => void): void => {\n        if (Number(msgNo) > 99) {\n            Modal.confirm({\n                title: '확인',\n                className: 'confirm_modal',\n                width: '300px',\n                content: alertMsg[msgNo],\n                okText: '확인',\n                cancelText: '취소',\n                // okButtonProps: { hidden: true },\n                onOk: okCallback,\n                onCancel: cancelCallback,\n                closable: true\n            });\n        } else {\n            Modal.info({\n                title: '확인',\n                className: 'confirm_modal',\n                width: '300px',\n                content: msg ? `${msg} ${alertMsg[msgNo]}` : alertMsg[msgNo],\n                okText: '확인',\n                cancelText: '취소',\n                cancelButtonProps: { hidden: true },\n                closable: true\n            });\n        }\n    },\n    confirm: (arg: any, okCallback: () => void, cancelCallback: () => void): void => {\n        Modal.confirm({\n            title: '확인',\n            className: 'confirm_modal',\n            width: '300px',\n            content: arg,\n            okText: '확인',\n            cancelText: '취소',\n            // okButtonProps: { hidden: true },\n            onOk: okCallback,\n            onCancel: cancelCallback,\n            closable: true\n        });\n    },\n    info: (arg: any): void => {\n        Modal.info({\n            title: '확인',\n            className: 'confirm_modal',\n            width: '300px',\n            content: arg,\n            okText: '확인',\n            cancelText: '취소',\n            cancelButtonProps: { hidden: true },\n            closable: true\n        });\n    },\n    infoCallback: (arg: any, okCallback: () => void): void => {\n        Modal.info({\n            title: '확인',\n            className: 'confirm_modal',\n            width: '300px',\n            content: arg,\n            okText: '확인',\n            cancelText: '취소',\n            onOk: okCallback,\n            cancelButtonProps: { hidden: true },\n            closable: true\n        });\n    },\n    warn: (arg: any): void => {\n        Modal.warn({\n            title: '확인',\n            className: 'confirm_modal',\n            width: '300px',\n            content: arg,\n            okText: '확인',\n            cancelText: '취소',\n            cancelButtonProps: { hidden: true },\n            closable: true\n        });\n    }\n};\n\nexport default modal;\n","import axios from 'axios';\nimport { Cookies } from 'react-cookie';\nimport service from './request';\nimport mockData from './mockData';\n\n// 테스트용\nexport const getUserList = async (payload, callback: any) => {\n    // const { data = null } = await request({\n    //     // url: `/`,\n    //     method: 'get',\n    //     data: payload\n    // });\n    const data = mockData.userList;\n    if (data !== null) {\n        callback(data);\n    }\n};\nexport const getDirectQuestions = async (payload, callback: any) => {\n    const { data = null } = await service({\n        // url: `/board-api/cms/direct-questions?searchDateType=0&startDate=2022-01-01&endDate=2022-02-15&searchStatus=999&questionType=999&searchUserType=0&limit=100&page=1`,\n        // url: `/board-api/cms/product-inquiry?page=1&limit=30&searchDateType=1&startDate=2022-02-10&endDate=2022-02-13&questionType=999&searchStatus=999&searchUserType=0&searchUserWord=&itemCode=&searchWord=&searchUserWord=&itemCode=&searchWord=`,\n        url: `http://58.181.51.162:5004/webhooks/rasa/webhook?token=secret`,\n        method: 'post',\n        data: payload\n    });\n    if (data !== null) {\n        callback(data);\n    }\n};\n\nexport const getManagerList = async (payload, callback: any) => {\n    // const { data = null } = await request({\n    //     // url: `/`,\n    //     method: 'get',\n    //     data: payload\n    // });\n    const data = mockData.managerList;\n    if (data !== null) {\n        callback(data);\n    }\n};\n","import { MessageFilled, QuestionCircleOutlined, QuestionOutlined } from '@ant-design/icons';\nimport { UserContactOutline } from 'antd-mobile-icons';\nimport {\n    Avatar,\n    Button,\n    Card,\n    Space,\n    TextArea,\n    Grid,\n    DotLoading,\n    FloatingBubble,\n    Popup,\n    Modal,\n    Toast\n} from 'antd-mobile';\nimport { ReactTinyLink } from 'react-tiny-link';\nimport React, { useRef, useState } from 'react';\nimport moment from 'moment';\nimport { Link } from 'react-router-dom';\nimport { getDirectQuestions } from 'api/testApi';\n\nconst Chat = () => {\n    const scrollViewRef = useRef(null);\n    const [msg, setMsg] = useState('');\n    const [isLoading, setIsLoading] = useState(false);\n    const [textList, setTextList] = useState([\n        { text: '<a>건강상태 질문</a><tag>aa</tag>', type: 'bot', date: '2022-05-15 17:52:32' },\n        { text: '건강상태 대답', type: 'user', date: '2022-05-15 17:52:32' },\n        {\n            text: '건강상태에 따른 챗봇에 대화가 이루어 집니다.\\n챗봇에 대답은 지연될수있습니다. ',\n            type: 'bot',\n            date: '2022-05-15 17:52:32'\n        },\n        {\n            text: '건강상태에 따른 챗봇에 대화가 이루어 집니다.\\n챗봇에 대답은 지연될수있습니다.111111111 ',\n            type: 'bot',\n            date: '2022-05-15 17:52:32'\n        }\n    ]);\n    const [text, setText] = useState('');\n    const onClick = () => {\n        Modal.confirm({\n            title: '상담사를 연결하시겠습니까?',\n            content: '상담내용은 녹음되거나 활용될 수 있습니다.',\n            onConfirm: () => {\n                // 차후 상담원 번호로 대체\n                document.location.href = 'tel:114';\n            },\n            confirmText: '확인',\n            cancelText: '취소'\n        });\n    };\n    const getRandomArbitrary = (min, max) => {\n        return Math.random() * (max - min) + min;\n    };\n    const sendMessage = () => {\n        setIsLoading(true);\n        const tmpMsgList = [\n            ...textList,\n            {\n                text: msg,\n                type: 'user',\n                date: '2022-05-15 17:52:32'\n            }\n        ];\n        setTextList(tmpMsgList);\n        setMsg('');\n        getDirectQuestions({ message: msg, sender: getRandomArbitrary(1000, 9999) }, data => {\n            setIsLoading(false);\n            setTextList([\n                ...tmpMsgList,\n                {\n                    text: data,\n                    type: 'bot',\n                    date: '2022-05-15 17:52:32'\n                }\n            ]);\n        });\n        // setTimeout(() => {\n        //     setIsLoading(false);\n        //     setTextList([\n        //         ...tmpMsgList,\n        //         {\n        //             text: '대답 : ' + msg,\n        //             type: 'bot',\n        //             date: '2022-05-15 17:52:32'\n        //         }\n        //     ]);\n        // }, 1000);\n    };\n    return (\n        <>\n            <div style={{ width: '100%' }}>\n                {textList.map((i, index) => {\n                    return (\n                        <>\n                            {i.type === 'bot' ? (\n                                <Grid columns={1} gap={5} style={{ display: 'flex', margin: 10 }}>\n                                    <Avatar src=\"\" style={{ '--size': '46px' }} />\n                                    <Card\n                                        style={{\n                                            fontWeight: 600,\n                                            maxWidth: 'calc( 100% - 150px)',\n                                            overflowWrap: 'anywhere'\n                                        }}>\n                                        <div dangerouslySetInnerHTML={{ __html: i?.text }}></div>\n                                    </Card>\n                                    <Space align=\"end\">\n                                        <div>{moment(i?.date).format('HH:mm:ss')}</div>\n                                    </Space>\n                                </Grid>\n                            ) : (\n                                <Grid\n                                    columns={1}\n                                    gap={3}\n                                    style={{\n                                        display: 'flex',\n                                        margin: 10,\n                                        justifyContent: 'end',\n                                        overflowWrap: 'anywhere'\n                                    }}>\n                                    <Card\n                                        style={{\n                                            fontWeight: 600,\n                                            maxWidth: 'calc( 100% - 150px)',\n                                            backgroundColor: '#1677ff'\n                                        }}>\n                                        {i?.text}\n                                    </Card>\n                                </Grid>\n                                // <Space justify={'end'} style={{ width: '100%', marginTop: '10px' }}>\n                                // </Space>\n                            )}\n                        </>\n                    );\n                })}\n                {isLoading && (\n                    <Grid columns={1} gap={5} style={{ display: 'flex', margin: 10 }}>\n                        <Avatar src=\"\" style={{ '--size': '46px' }} />\n                        <Card\n                            style={{\n                                fontWeight: 600,\n                                maxWidth: 'calc( 100% - 150px)',\n                                backgroundColor: '#1677ff',\n                                overflowWrap: 'anywhere'\n                            }}>\n                            <span style={{ fontSize: 14 }}>\n                                <DotLoading />\n                            </span>\n                        </Card>\n                    </Grid>\n                )}\n                <Grid columns={1} gap={5} style={{ display: 'flex', margin: 10 }}>\n                    <Avatar src=\"\" style={{ '--size': '46px' }} />\n                    <Card style={{ fontWeight: 600, maxWidth: 'calc( 100% - 150px)' }}>\n                        <ReactTinyLink\n                            cardSize=\"small\"\n                            showGraphic={true}\n                            maxLine={2}\n                            minLine={1}\n                            url=\"https://andrewandco.co.kr/surl/P/496/?cafe_mkt=ue_1019_secret_pc&NaPm=ci%3D5hlelMmjmJSKqVuwLGlTolrA%7Ctr%3Dgfa%7Cct%3Dl39w2jcg%7Chk%3D5a8f8afd7fe79fe4198af35aaf829794975d14de\"\n                        />\n                    </Card>\n                </Grid>\n                <Link to=\"/faq\">\n                    <FloatingBubble\n                        axis=\"x\"\n                        magnetic=\"x\"\n                        style={{\n                            '--initial-position-bottom': '50px',\n                            '--initial-position-right': '10px',\n                            '--edge-distance': '24px'\n                        }}>\n                        <QuestionOutlined style={{ fontSize: '26px' }} />\n                    </FloatingBubble>\n                </Link>\n                <FloatingBubble\n                    axis=\"x\"\n                    magnetic=\"x\"\n                    style={{\n                        '--initial-position-bottom': '50px',\n                        '--initial-position-left': '10px',\n                        '--edge-distance': '24px',\n                        '--background': 'white'\n                    }}\n                    onClick={onClick}>\n                    <UserContactOutline style={{ fontSize: '26px', color: 'gray' }} />\n                </FloatingBubble>\n            </div>\n\n            <div className=\"aimmed_chat_textbox\">\n                <div\n                    style={{\n                        display: 'flex',\n                        padding: '6px',\n                        backgroundColor: 'white'\n                    }}>\n                    <TextArea\n                        placeholder=\"문의사항을 입력하세요.\"\n                        rows={1}\n                        autoSize={{ minRows: 1, maxRows: 5 }}\n                        style={{\n                            minHeight: 24,\n                            width: 'calc( 100% - 80px )',\n                            backgroundColor: 'white',\n                            overflowY: 'hidden'\n                        }}\n                        value={msg}\n                        onChange={e => {\n                            setMsg(e);\n                        }}\n                    />\n                    <Button\n                        color=\"primary\"\n                        size=\"mini\"\n                        style={{ borderRadius: 0, width: '80px' }}\n                        onClick={sendMessage}>\n                        전송\n                    </Button>\n                </div>\n            </div>\n        </>\n    );\n};\n\nexport default Chat;\n","import React from 'react';\nimport { Template } from 'components';\nimport LoginContent from './content';\n\nconst Login: React.FunctionComponent = () => {\n    const Header = {\n        title: 'aimmed App'\n    };\n    return <LoginContent />;\n};\n\nexport default Login;\n","// 메세지 정의 100 이하는 단순 메세지 100 이상은 confirm 메세지로 구분\nexport const alertMsg = {\n    '000': '결과가 없습니다.',\n    '001': '삭제할 대상을 선택해주세요',\n    '002': '을(를) 입력(선택) 해주세요',\n    '003': '추가할 대상을 선택해주세요',\n    '004': '등록가능한 파일이 아닙니다.',\n    '005': '용량을 초과했습니다.',\n    // 여기서부터는 확인 메세지\n    '101': '저장하시겠습니까?',\n    '102': '삭제하시겠습니까?',\n    '103': '선택하시겠습니까?',\n    '104': '변경된 내용이 있습니다. 저장없이 목록으로 이동하시겠습니까?',\n    '105': '답글이 있는 기본글 삭제시 답글도 함께 삭제됩니다. 삭제하시겠습니까?'\n};\n"],"names":["error","response","statusText","data","message","isRefreshing","failedQueue","processQueue","token","forEach","prom","reject","resolve","service","axios","withCredentials","interceptors","request","use","config","cookies","Cookies","headers","Authorization","get","Promise","indexOf","modal","originalRequest","status","_retry","push","then","catch","err","refreshToken","returnData","result","newAccessToken","accessToken","newRefreshToken","remove","set","path","defaults","common","AccessToken","window","location","href","finally","ErrorContent","console","msg","msgNo","okCallback","cancelCallback","Number","Modal","title","className","width","content","alertMsg","okText","cancelText","onOk","onCancel","closable","cancelButtonProps","hidden","confirm","arg","info","infoCallback","warn","getDirectQuestions","payload","callback","url","method","useRef","useState","setMsg","isLoading","setIsLoading","text","type","date","textList","setTextList","style","map","i","index","columns","gap","display","margin","src","fontWeight","maxWidth","overflowWrap","dangerouslySetInnerHTML","__html","align","moment","format","justifyContent","backgroundColor","fontSize","ReactTinyLink","cardSize","showGraphic","maxLine","minLine","to","axis","magnetic","QuestionOutlined","onClick","onConfirm","document","confirmText","UserContactOutline","color","padding","placeholder","rows","autoSize","minRows","maxRows","minHeight","overflowY","value","onChange","e","size","borderRadius","min","max","tmpMsgList","sender","Math","random"],"sourceRoot":""}
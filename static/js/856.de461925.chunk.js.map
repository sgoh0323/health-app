{"version":3,"file":"static/js/856.de461925.chunk.js","mappings":"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","sources":["pages/ChatBot/index.tsx"],"sourcesContent":["import { MessageFilled, QuestionCircleOutlined, QuestionOutlined } from '@ant-design/icons';\r\nimport { UserContactOutline } from 'antd-mobile-icons';\r\nimport {\r\n    Avatar,\r\n    Button,\r\n    Card,\r\n    Space,\r\n    TextArea,\r\n    Grid,\r\n    DotLoading,\r\n    FloatingBubble,\r\n    Popup,\r\n    Modal,\r\n    Toast\r\n} from 'antd-mobile';\r\nimport { ReactTinyLink } from 'react-tiny-link';\r\nimport React, { useRef, useState } from 'react';\r\nimport moment from 'moment';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst Chat = () => {\r\n    const scrollViewRef = useRef(null);\r\n    const [msg, setMsg] = useState('');\r\n    const [isLoading, setIsLoading] = useState(false);\r\n    const [textList, setTextList] = useState([\r\n        { text: '<a>건강상태 질문</a><tag>aa</tag>', type: 'bot', date: '2022-05-15 17:52:32' },\r\n        { text: '건강상태 대답', type: 'user', date: '2022-05-15 17:52:32' },\r\n        {\r\n            text: '건강상태에 따른 챗봇에 대화가 이루어 집니다.\\n챗봇에 대답은 지연될수있습니다. ',\r\n            type: 'bot',\r\n            date: '2022-05-15 17:52:32'\r\n        },\r\n        {\r\n            text: '건강상태에 따른 챗봇에 대화가 이루어 집니다.\\n챗봇에 대답은 지연될수있습니다.111111111 ',\r\n            type: 'bot',\r\n            date: '2022-05-15 17:52:32'\r\n        }\r\n    ]);\r\n    const [text, setText] = useState('');\r\n    const onClick = () => {\r\n        Modal.confirm({\r\n            title: '상담사를 연결하시겠습니까?',\r\n            content: '상담내용은 녹음되거나 활용될 수 있습니다.',\r\n            onConfirm: () => {\r\n                // 차후 상담원 번호로 대체\r\n                document.location.href = 'tel:114';\r\n            },\r\n            confirmText: '확인',\r\n            cancelText: '취소'\r\n        });\r\n    };\r\n\r\n    const sendMessage = () => {\r\n        setIsLoading(true);\r\n        const tmpMsgList = [\r\n            ...textList,\r\n            {\r\n                text: msg,\r\n                type: 'user',\r\n                date: '2022-05-15 17:52:32'\r\n            }\r\n        ];\r\n        setTextList(tmpMsgList);\r\n        setMsg('');\r\n        setTimeout(() => {\r\n            setIsLoading(false);\r\n            setTextList([\r\n                ...tmpMsgList,\r\n                {\r\n                    text: '대답 : ' + msg,\r\n                    type: 'bot',\r\n                    date: '2022-05-15 17:52:32'\r\n                }\r\n            ]);\r\n        }, 1000);\r\n    };\r\n    return (\r\n        <>\r\n            <div style={{ width: '100%' }}>\r\n                {textList.map((i, index) => {\r\n                    return (\r\n                        <>\r\n                            {i.type === 'bot' ? (\r\n                                <Grid columns={1} gap={5} style={{ display: 'flex', margin: 10 }}>\r\n                                    <Avatar src=\"\" style={{ '--size': '46px' }} />\r\n                                    <Card\r\n                                        style={{\r\n                                            fontWeight: 600,\r\n                                            maxWidth: 'calc( 100% - 150px)',\r\n                                            overflowWrap: 'anywhere'\r\n                                        }}>\r\n                                        <div dangerouslySetInnerHTML={{ __html: i?.text }}></div>\r\n                                    </Card>\r\n                                    <Space align=\"end\">\r\n                                        <div>{moment(i?.date).format('HH:mm:ss')}</div>\r\n                                    </Space>\r\n                                </Grid>\r\n                            ) : (\r\n                                <Grid\r\n                                    columns={1}\r\n                                    gap={3}\r\n                                    style={{\r\n                                        display: 'flex',\r\n                                        margin: 10,\r\n                                        justifyContent: 'end',\r\n                                        overflowWrap: 'anywhere'\r\n                                    }}>\r\n                                    <Space align=\"end\">\r\n                                        <div>{moment(i?.date).format('HH:mm:ss')}</div>\r\n                                        <Card\r\n                                            style={{\r\n                                                fontWeight: 600,\r\n                                                // maxWidth: 'calc( 100% - 150px)',\r\n                                                backgroundColor: '#1677ff'\r\n                                            }}>\r\n                                            {i?.text}\r\n                                        </Card>\r\n                                    </Space>\r\n                                </Grid>\r\n                                // <Space justify={'end'} style={{ width: '100%', marginTop: '10px' }}>\r\n                                // </Space>\r\n                            )}\r\n                        </>\r\n                    );\r\n                })}\r\n                {isLoading && (\r\n                    <Grid columns={1} gap={5} style={{ display: 'flex', margin: 10 }}>\r\n                        <Avatar src=\"\" style={{ '--size': '46px' }} />\r\n                        <Card\r\n                            style={{\r\n                                fontWeight: 600,\r\n                                maxWidth: 'calc( 100% - 150px)',\r\n                                backgroundColor: '#1677ff',\r\n                                overflowWrap: 'anywhere'\r\n                            }}>\r\n                            <span style={{ fontSize: 14 }}>\r\n                                <DotLoading />\r\n                            </span>\r\n                        </Card>\r\n                    </Grid>\r\n                )}\r\n                <Grid columns={1} gap={5} style={{ display: 'flex', margin: 10 }}>\r\n                    <Avatar src=\"\" style={{ '--size': '46px' }} />\r\n                    <Card style={{ fontWeight: 600, maxWidth: 'calc( 100% - 150px)' }}>\r\n                        <ReactTinyLink\r\n                            cardSize=\"small\"\r\n                            showGraphic={true}\r\n                            maxLine={2}\r\n                            minLine={1}\r\n                            url=\"https://andrewandco.co.kr/surl/P/496/?cafe_mkt=ue_1019_secret_pc&NaPm=ci%3D5hlelMmjmJSKqVuwLGlTolrA%7Ctr%3Dgfa%7Cct%3Dl39w2jcg%7Chk%3D5a8f8afd7fe79fe4198af35aaf829794975d14de\"\r\n                        />\r\n                    </Card>\r\n                </Grid>\r\n                <Link to=\"/faq\">\r\n                    <FloatingBubble\r\n                        style={{\r\n                            '--initial-position-bottom': '50px',\r\n                            '--initial-position-right': '10px',\r\n                            '--edge-distance': '24px'\r\n                        }}>\r\n                        <QuestionOutlined style={{ fontSize: '26px' }} />\r\n                    </FloatingBubble>\r\n                </Link>\r\n                <FloatingBubble\r\n                    style={{\r\n                        '--initial-position-bottom': '50px',\r\n                        '--initial-position-left': '10px',\r\n                        '--edge-distance': '24px',\r\n                        '--background': 'white'\r\n                    }}\r\n                    onClick={onClick}>\r\n                    <UserContactOutline style={{ fontSize: '26px', color: 'gray' }} />\r\n                </FloatingBubble>\r\n            </div>\r\n\r\n            <div className=\"aimmed_chat_textbox\">\r\n                <div\r\n                    style={{\r\n                        display: 'flex',\r\n                        padding: '6px',\r\n                        backgroundColor: 'white'\r\n                    }}>\r\n                    <TextArea\r\n                        placeholder=\"문의사항을 입력하세요.\"\r\n                        rows={1}\r\n                        autoSize={{ minRows: 1, maxRows: 5 }}\r\n                        style={{\r\n                            minHeight: 24,\r\n                            width: 'calc( 100% - 52px )',\r\n                            backgroundColor: 'white',\r\n                            overflowY: 'hidden'\r\n                        }}\r\n                        value={msg}\r\n                        onChange={e => {\r\n                            setMsg(e);\r\n                        }}\r\n                    />\r\n                    <Button color=\"primary\" size=\"mini\" style={{ borderRadius: 0 }} onClick={sendMessage}>\r\n                        전송\r\n                    </Button>\r\n                </div>\r\n            </div>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Chat;\r\n"],"names":["useRef","useState","msg","setMsg","isLoading","setIsLoading","text","type","date","textList","setTextList","style","width","map","i","index","columns","gap","display","margin","src","fontWeight","maxWidth","overflowWrap","dangerouslySetInnerHTML","__html","align","moment","format","justifyContent","backgroundColor","fontSize","ReactTinyLink","cardSize","showGraphic","maxLine","minLine","url","to","onClick","Modal","title","content","onConfirm","document","location","href","confirmText","cancelText","color","className","padding","placeholder","rows","autoSize","minRows","maxRows","minHeight","overflowY","value","onChange","e","size","borderRadius","tmpMsgList","setTimeout"],"sourceRoot":""}
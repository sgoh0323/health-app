{"version":3,"file":"static/js/951.1e3cdb2c.chunk.js","mappings":"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","sources":["Popups/Manager/ManagerList.tsx","Popups/Manager/Container.tsx","Popups/Manager/index.tsx","components/customDownload/index.tsx","helper/recycle.ts","hooks/useLoding.ts","pages/SamplePage/SampleContainer.tsx","pages/SamplePage/index.tsx","types/Common/NoticesOptions.ts"],"sourcesContent":["import { Row, Col, Button } from 'antd';\nimport { uniqueId } from 'lodash';\nimport { Pagenation } from 'components';\nimport React from 'react';\nimport { AgGridReact } from 'ag-grid-react';\n\nconst nameRenderer = params => {\n    if (params.data && params.data.id) {\n        return (\n            <div>\n                {params.data.name} ( {params.data.id} )\n            </div>\n        );\n    } else if (params.data) {\n        return <div>{params.data.name} </div>;\n    }\n    return <div />;\n};\n\nconst gridOptions = {\n    columnDefs: [\n        {\n            field: 'number',\n            headerName: 'No.',\n            minWidth: 20,\n            headerCheckboxSelection: true,\n            checkboxSelection: true\n        },\n        {\n            field: 'id',\n            headerName: 'id',\n            minWidth: 20,\n            // headerCheckboxSelection: true,\n            // checkboxSelection: true\n            hide: true\n        },\n        {\n            field: 'userTypeFormat',\n            headerName: '구분'\n        },\n        {\n            field: 'mdName',\n            headerName: '담당MD',\n            minWidth: 30,\n            cellClass: 'tal'\n        },\n        {\n            field: 'name',\n            headerName: '업체명/관리자명',\n            minWidth: 100,\n            cellRendererFramework: nameRenderer\n        }\n    ],\n    headerHeight: 35,\n    rowHeight: 41,\n    defaultColDef: {\n        flex: 1,\n        minWidth: 120,\n        editable: false,\n        resizable: true,\n        sortable: true\n    },\n    suppressRowClickSelection: true,\n    rowSelection: 'multiple'\n};\nconst NoticeList = props => {\n    const { data, onRowSelected, page, setPage, onChangePage, onShowSizeChange, setGridApi } = props;\n    const onGridReady = params => {\n        // setGridApi(params.api);\n        setGridApi(params.api);\n        // setGridColumnApi(params.columnApi);\n    };\n\n    return (\n        <div className=\"ag-grid-custom\">\n            <div style={{ backgroundColor: 'white' }}>\n                <div\n                    className=\"ag-grid-custom__grid ag-theme-balham\"\n                    // style={{ width: '100%', height: '48.362vh' }}>\n                    style={{ width: '100%', height: '450px' }}>\n                    <AgGridReact\n                        rowData={data?.result?.list}\n                        gridOptions={gridOptions}\n                        onGridReady={onGridReady}\n                        enableRangeSelection\n                        onRowDoubleClicked={onRowSelected}\n                        // onCellClicked={node => {\n                        //     setItem(node.data);\n                        // }}\n                    />\n                </div>\n                <div className=\"page-box\" style={{ textAlign: 'center', marginTop: '10px' }}>\n                    <Pagenation\n                        total={data?.result?.total}\n                        current={page}\n                        onChange={onChangePage}\n                        showSizeChanger\n                        defaultPageSize={10}\n                        onShowSizeChange={onShowSizeChange}\n                    />\n                </div>\n            </div>\n        </div>\n    );\n};\nexport default NoticeList;\n","/* eslint-disable */\nimport { Row, Col, Select, DatePicker, Input, Button, Checkbox, Modal, Form, Radio } from 'antd';\nimport { getCommonUsers } from 'api/common/commonApi';\nimport { getManagerList } from 'api/testApi';\nimport { numberWithCommas } from 'helper/recycle';\nimport { uniqueId } from 'lodash';\nimport React, { useEffect, useState } from 'react';\nimport DaumPostcode from 'react-daum-postcode';\nimport { managerSearchOptions, managerUserTypeOptions, targetsOptions } from 'types/Common/NoticesOptions';\nimport ManagerList from './ManagerList';\n\nconst ManagerPopup: React.FunctionComponent<{ setValue: (e: any) => void }> = props => {\n    const { setValue } = props;\n    const [form] = Form.useForm();\n    const [data, setData] = useState<any>();\n    const [item, setItem] = useState<any>();\n    const [page, setPage] = useState<number>(1);\n    const [limit, setLimit] = useState<number>(10);\n    const [gridApi, setGridApi] = useState(null);\n\n    const onSearch = () => {\n        handleSearchData({ ...form.getFieldsValue(), page: page, limit: limit });\n    };\n\n    const onRowSelected = node => {\n        setValue([...node.data]);\n    };\n    const onSelected = () => {\n        const nodes = gridApi.getSelectedNodes();\n        const data = nodes.map(item => {\n            return item.data;\n        });\n        setValue(data);\n    };\n\n    const onChangePage = value => {\n        setPage(value);\n        handleSearchData({ ...form.getFieldsValue(), page: value, limit: limit });\n    };\n    const onShowSizeChange = (page, size) => {\n        setLimit(size);\n        handleSearchData({ ...form.getFieldsValue(), page: page, limit: size });\n        // setSearchParams({ ...searchParams, page: page });\n    };\n    const handleSearchData = params => {\n        getCommonUsers(\n            { ...params, searchUserType: params.searchUserType === 'all' ? undefined : params.searchUserType },\n            rs => {\n                setData(rs);\n            }\n        );\n    };\n    return (\n        <>\n            <Form form={form} layout=\"horizontal\">\n                <Row className=\"content__contentbox__table\">\n                    <Col className=\"label\" span={8}>\n                        구분\n                    </Col>\n                    <Col className=\"data\" span={16}>\n                        <Row justify=\"start\">\n                            <Form.Item name=\"searchUserType\" initialValue=\"all\" label=\"\" style={{ width: '120px' }}>\n                                <Select options={managerUserTypeOptions} />\n                            </Form.Item>\n                            <Form.Item name=\"searchType\" initialValue={0} label=\"\" style={{ width: '120px' }}>\n                                <Select options={managerSearchOptions} />\n                            </Form.Item>\n                            <Form.Item name=\"searchWord\" initialValue=\"\" label=\"\" style={{ width: '120px' }}>\n                                <Input />\n                            </Form.Item>\n                        </Row>\n                    </Col>\n                    <Col className=\"label \" span={8}>\n                        MD 별 전체업체 선택\n                    </Col>\n                    <Col className=\"data\" span={16}>\n                        <Row justify=\"start\">\n                            <Form.Item\n                                name=\"searchMdWord\"\n                                label=\"\"\n                                initialValue=\"\"\n                                style={{ width: '200px', marginLeft: '10px', marginRight: '0px' }}>\n                                <Input />\n                            </Form.Item>\n                        </Row>\n                    </Col>\n                </Row>\n            </Form>\n            <Row align=\"bottom\" key={uniqueId()} style={{ marginBottom: '10px', marginTop: '-12px' }} justify=\"center\">\n                <Button type=\"primary\" onClick={onSearch}>\n                    조회\n                </Button>\n                &nbsp;\n                <Button type=\"primary\">초기화</Button>\n            </Row>\n            <Row align=\"bottom\" key={uniqueId()} style={{ marginBottom: '10px', marginTop: '-12px' }}>\n                <Col span={12}>\n                    검색결과 : <span style={{ color: 'red' }}>({numberWithCommas(data?.result?.total)}건)</span>\n                </Col>\n                <Col span={12} style={{ textAlign: 'end' }}>\n                    <Button type=\"primary\" onClick={onSelected}>\n                        선택\n                    </Button>\n                </Col>\n            </Row>\n            <ManagerList\n                data={data}\n                onRowSelected={onRowSelected}\n                page={page}\n                onChangePage={onChangePage}\n                onShowSizeChange={onShowSizeChange}\n                setGridApi={setGridApi}\n            />\n        </>\n    );\n};\n\nexport default ManagerPopup;\n","/* eslint-disable */\nimport { Row, Col, Select, DatePicker, Input, Button, Checkbox, Modal, Form, Radio } from 'antd';\nimport React, { useEffect, useState } from 'react';\nimport ManagerList from './Container';\n\nconst ManagerPopup: React.FunctionComponent<{ setValue: (e: any) => void }> = props => {\n    const { setValue } = props;\n    const [form] = Form.useForm();\n    // 팝업창 열기\n    const openPostCode = () => {\n        const handleManagerList = data => {\n            console.log('handleManagerList');\n            console.log(data);\n            setValue(data);\n            modal.destroy();\n        };\n        const modal = Modal.info({\n            content: <ManagerList setValue={handleManagerList} />,\n            title: '관리자 검색',\n            closable: true,\n            okButtonProps: { style: { display: 'none' } },\n            className: 'confirm_modal',\n            width: '800px'\n        });\n    };\n\n    return (\n        <Button type=\"primary\" onClick={openPostCode}>\n            검색\n        </Button>\n    );\n};\n\nexport default ManagerPopup;\n","/* eslint-disable */\nimport React, { useEffect, useState } from 'react';\nimport { Upload, Button, Image, Row } from 'antd';\nimport { DeleteOutlined, DownloadOutlined } from '@ant-design/icons';\nimport modal from 'helper/customModal';\nimport { uniqueId } from 'lodash';\nimport useLoding from 'hooks/useLoding';\nimport { apiFileDownload } from 'api/common/commonApi';\n\nexport type FormLayout = 'horizontal' | 'inline' | 'preview';\n\ninterface CustomDownloadProps {\n    downloadFiles: any[];\n    setDownloadFiles?: (e) => void;\n    readonly?: boolean;\n}\n\nconst CustomDownload: React.FunctionComponent<CustomDownloadProps> = props => {\n    const { downloadFiles, setDownloadFiles, readonly } = props;\n    const { setLoading } = useLoding();\n    const onRemove = file => {\n        const index = downloadFiles.indexOf(file);\n        const newFileList = downloadFiles.slice();\n        newFileList.splice(index, 1);\n        setDownloadFiles(newFileList);\n    };\n    useEffect(() => {\n        return () => {\n            //\n        };\n    }, [downloadFiles]);\n\n    return (\n        <div style={{ marginBottom: '5px' }}>\n            {downloadFiles &&\n                downloadFiles.length > 0 &&\n                downloadFiles.map(item => {\n                    return (\n                        <Row\n                            key={uniqueId()}\n                            style={{\n                                display: 'inline-flex',\n                                border: '1px solid #e0e0e0',\n                                padding: '4px 10px',\n                                marginTop: '5px',\n                                marginRight: '5px',\n                                fontSize: '14px'\n                            }}\n                            align=\"middle\"\n                            title={item.fileName}>\n                            <DownloadOutlined />\n                            <div\n                                style={{\n                                    width: `119px`,\n                                    overflow: 'hidden',\n                                    textOverflow: 'ellipsis',\n                                    whiteSpace: 'nowrap',\n                                    cursor: 'pointer',\n                                    marginLeft: '5px'\n                                }}\n                                onClick={() => {\n                                    setLoading(apiFileDownload({ idx: item.idx, fileName: item.fileName }));\n                                }}>\n                                {item.fileName}\n                            </div>\n                            {readonly === undefined && (\n                                <div\n                                    style={{ width: `20px`, cursor: 'pointer' }}\n                                    onClick={() => {\n                                        onRemove(item);\n                                    }}>\n                                    <DeleteOutlined size={20} />\n                                </div>\n                            )}\n                        </Row>\n                    );\n                })}\n        </div>\n    );\n};\n\nexport default CustomDownload;\n","import { ValueFormatterParams } from 'ag-grid-community';\nimport { CommonOptionType } from 'api/common/commonType';\nimport moment, { Moment } from 'moment';\n\nexport const numberWithCommas = (arg: number): string => {\n    return arg !== undefined && arg ? arg.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',') : '0';\n};\nexport const numberDecimal = (arg: number, rule: number): number => {\n    if (arg.toString().indexOf('.') !== -1) {\n        return Number(arg.toFixed(rule));\n    }\n    return arg;\n};\nexport const toUnderCase = (arg: string): string => {\n    const result = arg.replace(/[A-Z]/g, (upp, i, st) => {\n        if (i === 0) {\n            return upp.toLowerCase();\n        }\n        return `_${upp.toLowerCase()}`;\n    });\n    return result;\n};\nexport const defaultDateFormat = (arg: string): string => {\n    return arg !== undefined && arg ? moment(arg).format('YYYY.MM.DD') : '';\n};\n\nexport const formatDate = (date: Moment | string): string =>\n    (typeof date === 'string' ? moment(date) : date).format('yyyy-MM-DD');\n\nexport const isUsedFormatter = (params: ValueFormatterParams): string => (params.value ? '사용' : '사용안함');\n\nexport const dateFormatter = (params: ValueFormatterParams): string => formatDate(params.value);\n\nexport const enumToOptions = (arg: any): { label: string; value: any }[] => {\n    const rsOptions = [];\n    Object.keys(arg).map(name => {\n        return rsOptions.push({ label: name, value: arg[name] });\n    });\n    return rsOptions;\n};\n\nexport const getOptionValue = (arg, value) => {\n    return arg.filter(item => item.value === value).length > 0 ? arg.filter(item => item.value === value)[0].label : '';\n};\n\nexport const emptyString = arg => {\n    return arg === undefined || arg === null ? '' : arg;\n};\n\nexport const mapDatesToRange = (sources: string[], target: string) => item => {\n    const start = item[sources[0]] || moment();\n    const end = item[sources[1]] || moment();\n    return { ...item, [target]: [moment(start), moment(end)] };\n};\n\nexport const dataToOptions = (arg: any[], labelKey: string, valueKey: string): CommonOptionType[] => {\n    const rsOptions = [];\n    arg.map(item => {\n        return rsOptions.push({ label: item[labelKey], value: item[valueKey] });\n    });\n    return rsOptions;\n};\n","import moment from 'moment';\nimport { useCallback } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { setApiCallIds, removeApiCallIds, setLoading as isLoading } from 'stores/common';\n\nexport const useLoding = (): any => {\n    const dispatch = useDispatch();\n\n    const setLoading = useCallback(\n        async payload => {\n            const id = moment().valueOf();\n            dispatch(setApiCallIds(id));\n            try {\n                await payload;\n            } finally {\n                dispatch(removeApiCallIds(id));\n            }\n        },\n        [dispatch]\n    );\n\n    const setForceLoading = useCallback(\n        async payload => {\n            dispatch(isLoading(payload));\n        },\n        [dispatch]\n    );\n\n    return {\n        setLoading,\n        setForceLoading\n    };\n};\n\nexport default useLoding;\n","/* eslint-disable */\nimport { Breadcrumb, Button, Col, Form, Input, Row, Tree } from 'antd';\nimport { useForm } from 'antd/lib/form/Form';\nimport { ColorPicker, CustomUpload, FilterRangePicker, PostcodePopup } from 'components';\nimport CustomDownload from 'components/customDownload';\nimport modal from 'helper/customModal';\nimport { uniqueId } from 'lodash';\nimport ManagerPopup from 'Popups/Manager';\nimport React, { useState, useEffect } from 'react';\nimport { alertMsg } from 'types/Common/AlertMassege';\n\nconst SampleContainer: React.FunctionComponent = () => {\n    const [adress, setAdress] = useState<any>();\n    const [manager, setManager] = useState<any>();\n    const [color, setColor] = useState<any>();\n    const [uploadFiles, setUploadFiles] = useState<File[]>([]);\n    const [downloadFiles, setDownloadFiles] = useState([\n        {\n            idx: 1,\n            fileName: 'test.jpg'\n        },\n        {\n            idx: 2,\n            fileName: 'test.jpg'\n        }\n    ]);\n    const [treeData, setTreeData] = useState([\n        { title: 'Dashboard', key: 'dashboard' },\n        {\n            title: '고객회원관리',\n            expanded: true,\n            key: 'customerMgmt',\n            children: [\n                { key: 'customerList', title: '회원정보조회' },\n                { key: 'customerNew', title: '회원추가' },\n                { key: 'customerOutList', title: '탈퇴회원조회' }\n            ]\n        },\n        {\n            title: '파트너사 게시판관리',\n            expanded: true,\n            key: 'partnerMgmt',\n            children: [\n                { key: 'partnerNoticeList', title: '파트너 공지사항 조회' },\n                { key: 'partnerNoticeNew', title: '공지사항 등록' },\n                { key: 'partnerDirectList', title: '파트너 1:1 문의' }\n            ]\n        }\n    ]);\n\n    const onChangeTreeData = e => {\n        console.log('onChangeTreeData');\n        console.log(e);\n        setTreeData([...e]);\n    };\n    const [form] = useForm();\n    const onCheck = checkedKeys => {\n        console.log(checkedKeys);\n    };\n    const onDragEnd = ({ event, node }) => {\n        console.log('onDragEnd');\n        console.log(event);\n        console.log(node);\n    };\n    const onDragOver = ({ event, node }) => {\n        console.log('onDragOver');\n        console.log(event);\n        console.log(node);\n    };\n    return (\n        <>\n            <section className=\"page_content\">\n                <Breadcrumb className=\"title-navi__navi\">\n                    <Breadcrumb.Item className=\"title-navi__navi__home\">회원관리</Breadcrumb.Item>\n                    <Breadcrumb.Item className=\"title-navi__navi__parent\">회원정보 조회/수정</Breadcrumb.Item>\n                </Breadcrumb>\n                hooks :<br></br>\n                로딩바\n                <br />\n                로딩바를 사용하고자하는 API를 setLoading(호출API) 안에 넣어주면 됩니다. <br />\n                로딩바가 필요한 API에 선택적으로 사용하시기 바랍니다\n                <br />\n                <br />\n                ex )<br />\n                import useLoding from 'hooks/useLoding';\n                <br />\n                <br />\n                const &#123; setLoading &#125; = useLoding();\n                <br />\n                <br />\n                <p>\n                    setLoading(\n                    <br />\n                    &nbsp;&nbsp;getDirectQuestions(param, data =&gt; &#123;\n                    <br />\n                    &nbsp;&nbsp;&nbsp;&nbsp;setRowDatas(data?.result);\n                    <br />\n                    &nbsp;&nbsp;&nbsp;&nbsp;setTotal(data?.result.total);\n                    <br />\n                    &nbsp;&nbsp;&#125;)\n                    <br />\n                    );\n                    <br />\n                </p>\n                <br />\n                <br />\n                <br />\n                Popups:\n                <br />\n                <Input value={adress?.address} style={{ width: '30%' }} />\n                <PostcodePopup setPostCode={setAdress} />\n                <br />\n                <Input value={manager?.name} style={{ width: '30%' }} />\n                <ManagerPopup setValue={setManager} />\n                <br />\n                <Row>\n                    <Col className=\"data\" span={20}>\n                        <ColorPicker />\n                    </Col>\n                </Row>\n                <br />\n                <br />\n                <br />\n                MeaasgeModal:\n                <br />\n                1. 메세지 코드만 사용 ex) modal.msg('001'); <br />\n                2. 추가 단어 + 메세지코드 ex) modal.msg('002','이름')\n                <br />\n                3. 확인 메세지 ex)modal.msg('101','회원정보를',// 확인시 함수,// 취소시 함수 )<br />\n                <div className=\"content__contentbox__table\">\n                    {Object.keys(alertMsg).map(item => {\n                        return (\n                            <Row\n                                key={uniqueId()}\n                                onClick={() => {\n                                    modal.msg(item);\n                                }}>\n                                <Col className=\"label\" span={3}>\n                                    {item}\n                                </Col>\n                                <Col className=\"data\" span={10}>\n                                    {alertMsg[item]}\n                                </Col>\n                            </Row>\n                        );\n                    })}\n                </div>\n                <br />\n                components: <br />\n                Filter 날짜선택 <br />\n                &lt;FilterRangePicker form=&#123;form&#125; /&gt;\n                <br /> props\n                <br />\n                - form: form 전달 *필수\n                <br />\n                - dateRangeOptions : 다른 날짜 옵션을 사용하고 싶다면 변경 옵션 *필수아님\n                <br />\n                - defaultRange: 초기 설정 값 안넣으면 기본 0 으로 오늘 날짜로 셋팅 *필수아님\n                <br />* searchDateType 은 작업마다 다른 부분이 많아 오직 날짜만 넣었습니다\n                <Form form={form}>\n                    <Row className=\"content__contentbox__table\">\n                        <Col className=\"label\" span={4}>\n                            기간\n                        </Col>\n                        <Col className=\"data\" span={20}>\n                            <Row align=\"middle\" justify=\"start\">\n                                <FilterRangePicker form={form} />\n                            </Row>\n                        </Col>\n                    </Row>\n                </Form>\n                <br></br>\n                파일 업로드\n                <br />\n                &lt;CustomUpload uploadFiles=&#123;uploadFiles&#125; setUploadFiles=&#123;setUploadFiles&#125; /&gt;\n                <br />\n                필수 props\n                <br />\n                uploadFiles // 업로드 파일 Sate\n                <br />\n                setUploadFiles // 업로드 파일 setState\n                <br />\n                선택 props\n                <br />\n                layout // 'horizontal' | 'inline' | 'preview' 선택 preview 는 이미지 미리보기 <br />\n                maxCount // 최대 파일 갯수 <br />\n                maxSize // 최대크기 MB <br />\n                disable // disable 여부 <br />\n                imageSize // preview 시 이미지 표기 크기\n                <Row className=\"content__contentbox__table\">\n                    <Col className=\"label\" span={4}>\n                        첨부\n                    </Col>\n                    <Col className=\"data\" span={20}>\n                        <Row align=\"middle\" justify=\"start\">\n                            <CustomUpload uploadFiles={uploadFiles} setUploadFiles={setUploadFiles} />\n                        </Row>\n                    </Col>\n                </Row>\n                <br></br>\n                파일 다운로드\n                <br />\n                &lt;CustomDownload downloadFiles=&#123;downloadFiles&#125; setDownloadFiles=&#123;setDownloadFiles&#125;\n                /&gt;\n                <br />\n                필수 props\n                <br />\n                downloadFiles // 다운로드 파일 Sate\n                <br />\n                setDownloadFiles // 다운로드 파일 setState\n                <br />\n                선택 props\n                <br />\n                readOnly // 파일제거 안하고 보여주기만 할시\n                <Row className=\"content__contentbox__table\">\n                    <Col className=\"label\" span={4}>\n                        첨부\n                    </Col>\n                    <Col className=\"data\" span={20}>\n                        <Row align=\"middle\" justify=\"start\">\n                            <CustomDownload downloadFiles={downloadFiles} setDownloadFiles={setDownloadFiles} />\n                        </Row>\n                    </Col>\n                </Row>\n                <br></br>\n                DnD Tree\n                <br />\n                &lt;CustomDndTree data=&#123;data&#125; setData=&#123;setData&#125; /&gt; <br />\n                필수 props\n                <br />\n                data // Tree 구조 Sate\n                <br />\n                setData // Tree 구조 setState\n                <br />\n                선택 props\n                <br />\n                height // Tree Box 높이 <br />\n                width // Tree Box 넓이 <br />\n                참고 https://github.com/frontend-collective/react-sortable-tree#usage\n                <br />\n                {/* <CustomDndTree data={treeData} setData={onChangeTreeData} /> */}\n                <br></br>\n                Tree\n                <br />\n                &lt;Tree checkable treeData=&#123;treeData&#125; onCheck=&#123;onCheck&#125; /&gt; <br />\n                필수 props\n                <br />\n                treeData // Tree 구조 Sate\n                <br />\n                setData // Tree 구조 setState\n                <br />\n                선택 props\n                <br />\n                checkable // 체크박스 활성화 <br />\n                onCheck // 체크변경시 함수 <br />\n                <div style={{ width: 400 }}>\n                    <Tree checkable treeData={treeData} onCheck={onCheck} />\n                </div>\n            </section>\n        </>\n    );\n};\n\nexport default SampleContainer;\n","import React from 'react';\nimport Container from './SampleContainer';\n\nconst NotideNew: React.FunctionComponent = () => {\n    const Header = {\n        title: ''\n    };\n\n    return <Container />;\n};\n\nexport default NotideNew;\n","export const targetsOptions = [\n    { label: '모든공지사항', value: 0 },\n    { label: '모든힙합퍼', value: 1 },\n    { label: '모든파트너', value: 2 },\n    { label: '특정파트너', value: 3 }\n];\nexport const confirmOptions = [\n    { label: '필수', value: 1 },\n    { label: '필수아님', value: 0 }\n];\n// export const topFixOptions = [\n//     { label: '고정함', value: 1 },\n//     { label: '고정 안함', value: 0 }\n// ];\nexport const useOptions = [\n    { label: '노출', value: 1 },\n    { label: '노출 안함', value: 0 }\n];\nexport const topFixOptions = [\n    { label: '전체', value: 'all' },\n    { label: '고정', value: 1 },\n    { label: '고정 안함', value: 0 }\n];\nexport const dateTypeOptions = [\n    { label: '등록일', value: 0 },\n    { label: '최종수정일', value: 1 }\n];\n\nexport const searchOptions = [\n    { label: '제목', value: 0 },\n    { label: '등록자명', value: 1 },\n    { label: '최종수정자명', value: 2 }\n];\n\n// 1:1문의\nexport const directDateTypeOptions = [\n    { label: '등록일', value: 0 },\n    { label: '최종답변일', value: 1 }\n];\n\nexport const directTargetsOptions = [\n    { label: '전체', value: 0 },\n    { label: 'MD', value: 1 }\n];\nexport const directSearchOptions = [\n    { label: '문의업체명', value: 0 },\n    { label: '최종답변자', value: 1 },\n    { label: '내용', value: 2 }\n];\nexport const statusOptions = [\n    { label: '전체', value: 999 },\n    { label: '답변대기', value: 100 },\n    { label: '답변준비', value: 500 },\n    { label: '답변완료', value: 200 }\n];\n\n// 관리자 조회 옵션\nexport const managerUserTypeOptions = [\n    { label: '전체', value: 'all' },\n    { label: '힙합퍼', value: 0 },\n    { label: '파트너', value: 1 }\n];\nexport const managerSearchOptions = [\n    { label: '이름', value: 0 },\n    { label: '아이디', value: 1 }\n];\n\n// 고객 상품문의\nexport const productInquiryQuestionTypeOptions = [\n    { label: '전체', value: 999 },\n    { label: '상품 문의', value: 100 },\n    { label: '재입고 문의', value: 200 },\n    { label: '사이즈 문의', value: 300 },\n    { label: '배송 문의', value: 400 },\n    { label: '기타', value: 500 }\n];\n\nexport const productInquirySearchTypeOptions = [\n    { label: '문의자명', value: 0 },\n    { label: '문의자ID', value: 1 },\n    { label: '상품코드', value: 2 },\n    { label: '내용', value: 3 },\n    { label: '최초답변자명', value: 4 },\n    { label: '최종답변자명', value: 5 }\n];\n\nexport const productInquiryDateTypeOptions = [\n    { label: '문의등록일', value: 0 },\n    { label: '최초답변일', value: 1 },\n    { label: '최종수정일', value: 2 }\n];\n\nexport const productInquiryStatusOptions = [\n    { label: '전체', value: 999 },\n    { label: '답변대기', value: 100 },\n    { label: '답변완료', value: 200 },\n    { label: '답변준비', value: 500 }\n];\n"],"names":["gridOptions","columnDefs","field","headerName","minWidth","headerCheckboxSelection","checkboxSelection","hide","cellClass","cellRendererFramework","params","data","id","name","headerHeight","rowHeight","defaultColDef","flex","editable","resizable","sortable","suppressRowClickSelection","rowSelection","props","onRowSelected","page","onChangePage","setPage","onShowSizeChange","setGridApi","className","style","backgroundColor","width","height","AgGridReact","rowData","result","list","onGridReady","api","enableRangeSelection","onRowDoubleClicked","textAlign","marginTop","total","current","onChange","showSizeChanger","defaultPageSize","setValue","Form","form","useState","setData","limit","setLimit","gridApi","handleSearchData","getCommonUsers","searchUserType","undefined","rs","layout","span","justify","initialValue","label","options","managerUserTypeOptions","managerSearchOptions","marginLeft","marginRight","align","marginBottom","type","onClick","getFieldsValue","uniqueId","color","numberWithCommas","getSelectedNodes","map","item","ManagerList","node","value","size","modal","Modal","content","console","log","destroy","title","closable","okButtonProps","display","downloadFiles","setDownloadFiles","readonly","setLoading","useLoding","useEffect","length","border","padding","fontSize","fileName","overflow","textOverflow","whiteSpace","cursor","apiFileDownload","idx","file","index","indexOf","newFileList","slice","splice","onRemove","arg","toString","replace","emptyString","dispatch","useDispatch","useCallback","payload","moment","valueOf","setApiCallIds","removeApiCallIds","setForceLoading","isLoading","adress","setAdress","manager","setManager","uploadFiles","setUploadFiles","key","expanded","children","treeData","useForm","address","setPostCode","Manager","Object","keys","alertMsg","checkable","onCheck","checkedKeys","targetsOptions","confirmOptions","useOptions","topFixOptions","dateTypeOptions","searchOptions","directDateTypeOptions","directTargetsOptions","directSearchOptions","statusOptions"],"sourceRoot":""}